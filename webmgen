#!/usr/bin/env bash

# Convert file to VP8-encoded webm

########## Default ffmpeg options ##########

video_codec="libvpx"
video_bitrate="1M"
video_quality="best"
audio_codec="libvorbis"
audio_bitrate="128K"
loglevel="error"

########## Functions ##########

# Show usage information
function usage() {
  echo "Usage: $(basename "${0}") [OPTIONS] FILE"
  echo "Convert FILE to VP8-encoded webm."
  echo "Output is saved in the same directory of FILE, unless -d option is used."
  echo "Where appropriate, options accept the following unit prefixes: K, M, G."
  echo 
  echo "Options:"
  echo "  -r RESOLUTION     vertical RESOLUTION (keeps aspect ratio)"
  echo "  -v BITRATE        video BITRATE (default: ${video_bitrate})"
  echo "  -a BITRATE        audio BITRATE (default: ${audio_bitrate})"
  echo "  -s SIZE           SIZE of output file(s), expressed in bytes. Actual size can be slightly more"
  echo "                    than requested size. If -p is not set, bitrate specified by -v is ignored."
  echo "  -p                split output into multiple files. Requires -s."
  echo "  -c [START],[END]  cut input file from START to END before encoding."
  echo "                    START, END are formatted as HH:MM:SS; only one can be omitted."
  echo "  -d DIRECTORY      output DIRECTORY (default: directory of input FILE)"
  echo "  -t THREADS        number of threads to use for encoding (default: one less than the number of CPUs)"
  echo "  -h                show help and exit"
}

# Print to stderr
function error() {
  echo "${*}" >&2
}

# Delete any leftover file before exiting
function cleanup() {
  local status="${?}"
  rm --recursive --force "${temp_dir}" >/dev/null 2>&1
  exit "${status}"
}

# Calculate duration in seconds of video file
function get_duration() {
  local duration
  if ! duration="$(ffprobe -i "${1}" -show_entries format=duration -v quiet -of csv='p=0')"; then
    return 1
  fi
  bc --mathlib <<< "scale=0; ${duration}/1" # Floor
}

# Calculate ceiling of number
function ceil() {
  python3 -c "from math import ceil; print(ceil(${1}))"
}

# Convert number string to its corresponding value in bits/bytes (e.g. 128k -> 128000)
function to_number() {
  local number
  if [[ "${1}" =~ (k|K)$ ]]; then
    number="$(bc --mathlib <<< "10^3 * ${1::-1}")"
  elif [[ "${1}" =~ M$ ]]; then
    number="$(bc --mathlib <<< "10^6 * ${1::-1}")"
  elif [[ "${1}" =~ G$ ]]; then
    number="$(bc --mathlib <<< "10^9 * ${1::-1}")"
  else # No known suffixes, assume raw bits/bytes
    number="${1}"
  fi
  ceil "${number}"
}

# Encode webm with two-pass
function encode() {
  local args=("${@}")
  local args_count="${#args[@]}"
  local index_last=$((args_count-1))
  local log_filepath="${temp_dir}/2pass"
  # ${arr[@]::length} slice from 0 to length-1 inclusive
  local args_pass1=("${args[@]::index_last}" -pass "1" -passlogfile "${log_filepath}" -an -y -f "null" "/dev/null")
  local args_pass2=("${args[@]::index_last}" -pass "2" -passlogfile "${log_filepath}" "${args[-1]}")
  (set -x; ffmpeg "${args_pass1[@]}") || return 1
  (set -x; ffmpeg "${args_pass2[@]}") || return 1
  rm --force "${log_filepath}" >/dev/null 2>&1
}

########## Main ##########

# Hook cleanup function
trap cleanup EXIT

# Check dependencies
deps=("ffmpeg" "ffprobe" "grep" "bc" "lscpu" "python3")
for dep in "${deps[@]}"; do
  if ! command -v "${dep}" >/dev/null 2>&1; then
    error "Error: ${dep} not found. You may need to install it."
    exit 1
  fi
done

# Parse options
while getopts ":hr:s:t:c:v:a:d:p" option; do
  case "${option}" in
    h)
      usage
      exit 0
      ;;
    r) 
      output_vres="${OPTARG}"
      ;;
    s)
      output_size="${OPTARG}"
      ;;
    t)
      threads="${OPTARG}"
      ;;
    c)
      cut_start="${OPTARG%,*}"
      cut_end="${OPTARG#*,}"
      cut_args=()
      [[ "${cut_start}" ]] && cut_args+=(-ss "${cut_start}")
      [[ "${cut_end}" ]] && cut_args+=(-to "${cut_end}")
      ;;
    p)
      split=true
      ;;
    v)
      video_bitrate="${OPTARG}"
      custom_video_bitrate=true
      ;;
    a)
      audio_bitrate="${OPTARG}"
      ;;
    d)
      output_dir="${OPTARG}"
      ;;
    :)
      error "Error: '-${OPTARG}' option requires an argument."
      exit 1
      ;;
    ?)
      error "Error: unknown option '-${OPTARG}'."
      exit 1
      ;;
  esac
done

# Check positional arguments
shift $((OPTIND-1))
if [[ "${#}" -ne 1 ]]; then
  error "Error: missing input FILE."
  exit 1
fi

# Option -p requires -s
if [[ -n "${split}" && -z "${output_size}" ]]; then
  error "Error: missing option '-s SIZE'."
  exit 1
fi

# Check input file
if ! [[ -e "${1}" ]]; then
  error "Error: file '${1}' does not exist."
  exit 1
fi
if ! [[ -f "${1}" ]]; then
  error "Error: '${1}' is not a regular file."
  exit 1
fi
input_filepath="${1}"
input_filename="$(basename "${1}")"

# Output directory
if [[ -n "${output_dir}" ]]; then
  if ! [[ -e "${output_dir}" ]]; then
    error "Error: directory '${output_dir}' does not exist."
    exit 1
  fi
  if ! [[ -d "${output_dir}" ]]; then
    error "Error: '${output_dir}' is not a directory."
    exit 1
  fi
  output_dir="${output_dir%/}"
else
  output_dir="$(dirname "${input_filepath}")"
fi

# Multithreading options
if [[ -z "${threads}" ]]; then
  if ! cores="$(lscpu --parse=cpu | grep --count --invert-match '^#')"; then
    echo "Warning: failed to get CPU count, disabling multithreading."
    threads="1"
  else
    threads="$((cores-1))"
  fi
fi

# Create directory for temporary files
if ! temp_dir="$(mktemp --directory)"; then
  error "Error: failed to create temporary directory."
  exit 1
fi

if [[ ${#cut_args[@]} -gt 0 ]]; then
  # Cut video
  if ! tmp_file="$(mktemp -t -p "${temp_dir}" --suffix=".${input_filename##*.}")"; then
    error "Error: failed to create temporary file for cutting."
    exit 1
  fi
  set -x
  ffmpeg -y -loglevel warning -i "${input_filepath}" -c copy "${cut_args[@]}" "${tmp_file}"
  { status=${?}; set +x; } 2>/dev/null
  if [[ "${status}" -ne 0 ]]; then
    error "Error: failed to cut input file."
    exit 1
  fi
  input_filepath="${tmp_file}"
fi

# Common ffmpeg options
ffmpeg_args=(-i "${input_filepath}" -loglevel "${loglevel}" -threads "${threads}" -c:a "${audio_codec}" -b:a "${audio_bitrate}" -c:v "${video_codec}" -quality "${video_quality}")

if [[ -n "${output_vres}" ]]; then
  # Set video scaling
  if ! input_vres="$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of csv=s=x:p=0 "${input_filepath}")"; then
    error "Error: failed to get input file resolution."
    exit 1
  fi
  if [[ "${input_vres}" -lt "${output_vres}" ]]; then
    error "Error: attempting to upscale resolution."
    exit 1
  fi
  if [[ "${input_vres}" -eq "${output_vres}" ]]; then
    echo "Warning: output resolution matches input, ignoring (-r ${output_vres})."
  else
    ffmpeg_args+=(-vf scale="-2:${output_vres}")
  fi
fi

if [[ -n "${split}" ]]; then
  # Generate multiple webms
  if ! duration="$(get_duration "${input_filepath}")"; then
    error "Error: failed to get input file duration."
    exit 1
  fi
  sec=0
  j=1
  until ((sec >= duration))
  do
    output_filename="${input_filename%.*}-${j}.webm"
    output_filepath="${output_dir}/${output_filename}"
    if ! encode "${ffmpeg_args[@]}" -ss "${sec}" -fs "${output_size}" -b:v "${video_bitrate}" "${output_filepath}"; then
      error "Error: failed to create webm file."
      exit 1
    fi
    if ! split_duration="$(get_duration "${output_filepath}")"; then
      error "Error: failed to get split file duration."
      exit 1
    fi
    sec="$((sec+split_duration))"
    j="$((j+1))"
  done
else
  # Generate single webm
  if [[ -n "${output_size}" ]]; then
    # Set video bitrate to fit within file size limit
    if [[ -n "${custom_video_bitrate}" ]]; then
      echo "Warning: ignoring video bitrate (-v ${video_bitrate})."
    fi
    if ! duration="$(get_duration "${input_filepath}")"; then
      error "Error: failed to get input file duration."
      exit 1
    fi
    if ! output_size_bytes="$(to_number "${output_size}")"; then
      error "Error: invalid argument for option '-s SIZE'."
      exit 1
    fi
    if ! file_bitrate="$(bc --mathlib <<< "(8*${output_size_bytes})/${duration}")"; then
      error "Error: failed to calculate output file bitrate."
      exit 1
    fi
    if ! file_bitrate="$(ceil "${file_bitrate}")"; then
      error "Error: failed to calculate output file bitrate."
      exit 1
    fi
    if ! audio_bitrate="$(to_number "${audio_bitrate}")"; then
      error "Error: invalid argument for option '-a BITRATE'."
      exit 1
    fi
    video_bitrate="$((file_bitrate-audio_bitrate))"
  fi
  if ! encode "${ffmpeg_args[@]}" -b:v "${video_bitrate}" "${output_dir}/${input_filename%.*}.webm"; then
    error "Error: failed to create webm file."
    exit 1
  fi
fi